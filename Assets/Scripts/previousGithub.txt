using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Networking;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;

public class GithubAI : MonoBehaviour
{
    [Header("UI Elements")]
    [SerializeField] private InputField inputField;
    [SerializeField] private Button sendButton;
    [SerializeField] private ScrollRect chatScroll;
    [SerializeField] private RectTransform sent;
    [SerializeField] private RectTransform received;

    [Header("GitHub API Config")]
    [SerializeField] private string apiEndpoint = "https://models.github.ai/inference/chat/completions";
    private string githubToken;

    private float height;
    private List<ChatMessage> messages = new List<ChatMessage>();
    private Dictionary<string, string> envVariables = new Dictionary<string, string>();

    [System.Serializable]
    public class ChatMessage
    {
        [JsonProperty("role")]
        public string Role;
        
        [JsonProperty("content")]
        public string Content;
    }

    private void Start()
    {
        sendButton.onClick.AddListener(SendReply);
        LoadEnvFile();
    }

    private void LoadEnvFile()
    {
        string filePath = Path.Combine(Application.dataPath, ".env");

        if (File.Exists(filePath))
        {
            string[] lines = File.ReadAllLines(filePath);
            foreach (string line in lines)
            {
                if (!string.IsNullOrWhiteSpace(line) && !line.TrimStart().StartsWith("#"))
                {
                    string[] parts = line.Split(new char[] { '=' }, 2);
                    if (parts.Length == 2)
                    {
                        string key = parts[0].Trim();
                        string value = parts[1].Trim().Trim('"');
                        envVariables[key] = value;

                        if (value.StartsWith("ghp_") && string.IsNullOrEmpty(githubToken))
                        {
                            githubToken = value;
                        }
                    }
                }
            }

            if (string.IsNullOrEmpty(githubToken))
            {
                Debug.LogWarning("No GitHub token found in .env.");
                sendButton.interactable = false;
                AppendMessage(new ChatMessage { Role = "assistant", Content = "Error: GitHub token not found." });
            }
        }
        else
        {
            Debug.LogWarning(".env file not found at: " + filePath);
            sendButton.interactable = false;
            AppendMessage(new ChatMessage { Role = "assistant", Content = "Error: .env file not found. Add it under Assets/." });
        }
    }

    private void AppendMessage(ChatMessage message)
    {
        chatScroll.content.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, 0);

        var item = Instantiate(message.Role == "user" ? sent : received, chatScroll.content);
        item.GetChild(0).GetChild(0).GetComponent<Text>().text = message.Content;
        item.anchoredPosition = new Vector2(0, -height);
        LayoutRebuilder.ForceRebuildLayoutImmediate(item);
        height += item.sizeDelta.y;
        chatScroll.content.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, height);
        chatScroll.verticalNormalizedPosition = 0;
    }

    private void SendReply()
    {
        if (string.IsNullOrWhiteSpace(inputField.text)) return;

        var newMessage = new ChatMessage
        {
            Role = "user",
            Content = inputField.text
        };

        AppendMessage(newMessage);
        messages.Add(newMessage);

        inputField.text = "";
        inputField.enabled = false;
        sendButton.enabled = false;

        StartCoroutine(SendChatRequest());
    }

    private IEnumerator SendChatRequest()
    {
        var payload = new
        {
            provider = "azureml",
            publisher = "github",
            model = "gpt-4", // or adjust if GitHub supports another label
            messages = messages,
            temperature = 0.7,
            max_tokens = 150
        };

        string json = JsonConvert.SerializeObject(payload);
        byte[] body = System.Text.Encoding.UTF8.GetBytes(json);

        using (UnityWebRequest req = new UnityWebRequest(apiEndpoint, "POST"))
        {
            req.uploadHandler = new UploadHandlerRaw(body);
            req.downloadHandler = new DownloadHandlerBuffer();
            req.SetRequestHeader("Content-Type", "application/json");
            req.SetRequestHeader("Authorization", $"Bearer {githubToken}");
            req.SetRequestHeader("User-Agent", "Unity-App");

            yield return req.SendWebRequest();

            if (req.result == UnityWebRequest.Result.Success)
            {
                var response = JsonConvert.DeserializeObject<GitHubApiResponse>(req.downloadHandler.text);
                var reply = response.choices[0].message.content.Trim();

                var message = new ChatMessage
                {
                    Role = "assistant",
                    Content = reply
                };

                messages.Add(message);
                AppendMessage(message);
            }
            else
            {
                Debug.LogError($"GitHub API Error: {req.downloadHandler.text}");
                AppendMessage(new ChatMessage { Role = "assistant", Content = $"Error: {req.error}" });
            }

            inputField.enabled = true;
            sendButton.enabled = true;
        }
    }

    [System.Serializable]
    private class GitHubApiResponse
    {
        public Choice[] choices;

        [System.Serializable]
        public class Choice
        {
            public Message message;

            [System.Serializable]
            public class Message
            {
                public string content;
            }
        }
    }
}
